//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "gardening_task_growth_assoication")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub gardening_task_uuid: Uuid,
    pub growth_uuid: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::gardening_task::Entity",
        from = "Column::GardeningTaskUuid",
        to = "super::gardening_task::Column::Uuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GardeningTask,
    #[sea_orm(
        belongs_to = "super::growth::Entity",
        from = "Column::GrowthUuid",
        to = "super::growth::Column::Uuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Growth,
}

impl Related<super::gardening_task::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GardeningTask.def()
    }
}

impl Related<super::growth::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Growth.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
