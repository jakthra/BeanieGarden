//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "common_plant")]
pub struct Model {
    #[sea_orm(unique)]
    pub common_danish_name: String,
    #[sea_orm(unique)]
    pub common_english_name: String,
    pub da_wiki_url: String,
    pub image_url: String,
    pub decription: String,
    #[sea_orm(primary_key, auto_increment = false)]
    pub gbif_genus_key: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::gbif_genus::Entity",
        from = "Column::GbifGenusKey",
        to = "super::gbif_genus::Column::Key",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    GbifGenus,
    #[sea_orm(has_many = "super::growth::Entity")]
    Growth,
}

impl Related<super::gbif_genus::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GbifGenus.def()
    }
}

impl Related<super::growth::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Growth.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
