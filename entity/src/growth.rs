//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "growth")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub uuid: Uuid,
    pub growth_type: String,
    #[sea_orm(column_type = "Float")]
    pub age_estimate: f32,
    #[sea_orm(column_type = "Float")]
    pub height: f32,
    #[sea_orm(column_type = "Float")]
    pub width: f32,
    pub common_plant_id: i32,
    pub account_uuid: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::account::Entity",
        from = "Column::AccountUuid",
        to = "super::account::Column::Uuid",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Account,
    #[sea_orm(
        belongs_to = "super::common_plant::Entity",
        from = "Column::CommonPlantId",
        to = "super::common_plant::Column::GbifGenusKey",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    CommonPlant,
    #[sea_orm(has_many = "super::gardening_task_growth_assoication::Entity")]
    GardeningTaskGrowthAssoication,
}

impl Related<super::account::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Account.def()
    }
}

impl Related<super::common_plant::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CommonPlant.def()
    }
}

impl Related<super::gardening_task_growth_assoication::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::GardeningTaskGrowthAssoication.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
